{
   "data_loader": {
      "batch_sampler": {
         "batch_size": 32,
         "max_tokens": 1024,
         "sampling_smoothing": 1,
         "sorting_keys": [
            "tokens"
         ],
         "type": "dataset_buckets"
      }
   },
   "dataset_reader": {
      "do_lowercase": false,
      "source_max_tokens": 512,
      "target_max_tokens": 512,
      "target_token_indexers": {
         "tokens": {
            "namespace": "target_words"
         }
      },
      "token_indexers": {
         "tokens": {
            "max_length": 512,
            "model_name": "bert-base-cased",
            "type": "pretrained_transformer_mixmatched"
         }
      },
      "tokenizer": {
         "add_special_tokens": false,
         "model_name": "bert-base-cased",
         "type": "pretrained_transformer"
      },
      "type": "machamp_universal_reader"
   },
   "datasets_for_vocab_creation": [
      "train",
      "validation"
   ],
   "model": {
      "dataset_embeds_dim": 0,
      "decoders": {
         "classification": {
            "type": "machamp_sentence_decoder"
         },
         "default": {
            "input_dim": 768,
            "loss_weight": 1,
            "order": 1
         },
         "dependency": {
            "arc_representation_dim": 768,
            "tag_representation_dim": 256,
            "type": "machamp_dependency_decoder",
            "use_mst_decoding_for_validation": true
         },
         "mlm": {
            "pretrained_model": "bert-base-cased",
            "type": "machamp_mlm_decoder"
         },
         "multiseq": {
            "metric": "multi_span_f1",
            "type": "machamp_multiseq_decoder"
         },
         "seq": {
            "type": "machamp_tag_decoder"
         },
         "seq2seq": {
            "attention": "dot_product",
            "beam_size": 6,
            "max_decoding_steps": 128,
            "target_decoder_layers": 2,
            "target_embedding_dim": 512,
            "type": "machamp_seq2seq_decoder",
            "use_bleu": true
         },
         "seq_bio": {
            "metric": "span_f1",
            "type": "machamp_crf_decoder"
         },
         "string2string": {
            "type": "machamp_tag_decoder"
         }
      },
      "default_max_sents": 0,
      "dropout": 0.29999999999999999,
      "encoder": {
         "cls_is_last_token": false,
         "embedding_dim": 768,
         "type": "cls_pooler"
      },
      "text_field_embedder": {
         "token_embedders": {
            "tokens": {
               "last_layer_only": true,
               "max_length": 512,
               "model_name": "bert-base-cased",
               "train_parameters": true,
               "type": "machamp_pretrained_transformer_mismatched"
            }
         },
         "type": "basic"
      },
      "type": "machamp_model"
   },
   "numpy_seed": 1337,
   "pytorch_seed": 133,
   "random_seed": 13370,
   "trainer": {
      "checkpointer": {
         "num_serialized_models_to_keep": 1
      },
      "grad_norm": 1,
      "learning_rate_scheduler": {
         "cut_frac": 0.20000000000000001,
         "decay_factor": 0.38,
         "discriminative_fine_tuning": true,
         "gradual_unfreezing": true,
         "type": "slanted_triangular"
      },
      "num_epochs": 20,
      "optimizer": {
         "betas": [
            0.90000000000000002,
            0.98999999999999999
         ],
         "correct_bias": false,
         "lr": 0.0001,
         "parameter_groups": [
            [
               [
                  "^_text_field_embedder.*.transformer_model.*"
               ],
               { }
            ],
            [
               [
                  "^decoders.*",
                  "dataset_embedder.*"
               ],
               { }
            ]
         ],
         "type": "huggingface_adamw",
         "weight_decay": 0.01
      },
      "validation_metric": "+.run/.sum"
   },
   "vocabulary": {
      "max_vocab_size": {
         "target_words": 32000
      },
      "min_count": {
         "source_words": 1,
         "target_words": 1
      }
   }
}
